{
  "stats": {
    "suites": 11,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2022-03-22T09:30:01.123Z",
    "end": "2022-03-22T09:31:19.056Z",
    "duration": 77933,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7c26be6c-0ad7-483b-bc85-447614ea2179",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eb2be632-f0ce-4a0c-9bff-83f8a34d5371",
          "title": "ED_VDF contract",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
          "file": "\\test\\edvdf.contract.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ED_VDF contract \"before all\" hook",
              "timedOut": false,
              "duration": 1767,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "EDVdfContractABI = await ethers.getContractFactory(CONTRACT_NAME);\nconst accounts = (await ethers.getSigners()).slice(0, 5);\nfor(let account of accounts){\n    SECRET_SHARER_PARTICIPANTS.push(await account.getAddress());\n}",
              "err": {},
              "uuid": "ae077954-6096-4d7c-b8aa-749500ff5205",
              "parentUUID": "eb2be632-f0ce-4a0c-9bff-83f8a34d5371",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd74dcd5-aa2e-4db3-a9b1-e6ccb288ab28",
              "title": "deployment",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful",
                  "fullTitle": "ED_VDF contract deployment should be successful",
                  "timedOut": false,
                  "duration": 600,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EDVdfContract = await EDVdfContractABI.deploy();\nconst actualStatus = await EDVdfContract.STATUS();\nreturn expect(actualStatus).to.be.eql('INIT');",
                  "err": {},
                  "uuid": "6d2c8f19-56cb-44c7-8abb-8bf4e107915d",
                  "parentUUID": "bd74dcd5-aa2e-4db3-a9b1-e6ccb288ab28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d2c8f19-56cb-44c7-8abb-8bf4e107915d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 600,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "77352d41-9643-4810-961a-f62687b1f041",
              "title": "Setup",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Setup should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 4576,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst {PublicParameters, Totient, PrivateParameter} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_Status).to.be.eql('SETUP');",
                  "err": {},
                  "uuid": "5ede0a58-8b1f-4c9f-8b5f-50bf486ff959",
                  "parentUUID": "77352d41-9643-4810-961a-f62687b1f041",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ede0a58-8b1f-4c9f-8b5f-50bf486ff959"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4576,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c3ca5c47-285a-4b07-90da-3adb925352eb",
              "title": "EarlyDecryptionSetup",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract EarlyDecryptionSetup should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 10245,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.setEncryptedMessage(encrypted);\nawait EdVdfContract.setEncryptedMessageIV(iv.toString('hex'));\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistribution = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS);\nawait event_EARLY_DECRYPTION_SETUP();\nconst actual_SECRET_SHARER_PARTICIPANTS = await EdVdfContract.get_SECRET_SHARER_PARTICIPANTS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_SECRET_SHARER_PARTICIPANTS).to.be.eql(SECRET_SHARER_PARTICIPANTS);",
                  "err": {},
                  "uuid": "d63eb825-de4b-4fab-b010-8e8a6bbde513",
                  "parentUUID": "c3ca5c47-285a-4b07-90da-3adb925352eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d63eb825-de4b-4fab-b010-8e8a6bbde513"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10245,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "7a51bd13-35ef-4666-8c01-395230887db7",
              "title": "Eval",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Eval should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 11148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.setEncryptedMessage(encrypted);\nawait EdVdfContract.setEncryptedMessageIV(iv.toString('hex'));\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistributionEvents = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nawait EdVdfContract.setStateToEval();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('EVAL');",
                  "err": {},
                  "uuid": "4472bb05-56ec-41ff-b626-dee2b9645150",
                  "parentUUID": "7a51bd13-35ef-4666-8c01-395230887db7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4472bb05-56ec-41ff-b626-dee2b9645150"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11148,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "3963df25-efd5-4421-9a2d-57b41576ce28",
              "title": "EarlyDecryption",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract EarlyDecryption should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 18341,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.setEncryptedMessage(encrypted);\nawait EdVdfContract.setEncryptedMessageIV(iv.toString('hex'));\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistributionEvents = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nawait EdVdfContract.setStateToEval();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('EVAL');",
                  "err": {},
                  "uuid": "3b629ffe-45d9-4e94-b812-6000708dd114",
                  "parentUUID": "3963df25-efd5-4421-9a2d-57b41576ce28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b629ffe-45d9-4e94-b812-6000708dd114"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18341,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "058a3935-ce20-4e8b-bffa-823085abea36",
              "title": "Verify",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Verify should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 14238,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst event_VERIFY = WaitEvent(EDVdfContractABI.signer.provider, \"VERIFY(address,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.setEncryptedMessage(encrypted);\nawait EdVdfContract.setEncryptedMessageIV(iv.toString('hex'));\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistribution = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nawait EdVdfContract.setStateToEval();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nawait EdVdfContract.Verify(evalPrivateParameter.value, pi.value);\nawait event_VERIFY();\nawait EdVdfContract.setStateToVerify();\nawait EDVDF.Verify(PublicParameters, actual_x, evalPrivateParameter, pi);\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_SECRET_SHARER_PARTICIPANTS = await EdVdfContract.get_SECRET_SHARER_PARTICIPANTS();\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_SECRET_SHARER_PARTICIPANTS).to.be.eql(SECRET_SHARER_PARTICIPANTS)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('VERIFY');",
                  "err": {},
                  "uuid": "5fcdcd9b-a311-4738-b940-f4c81d87af74",
                  "parentUUID": "058a3935-ce20-4e8b-bffa-823085abea36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fcdcd9b-a311-4738-b940-f4c81d87af74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14238,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
          "title": "ED-VDF",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.test.js",
          "file": "\\test\\edvdf.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Setup should be successfully return {PublicParameters[N, TIME[\"10s\"], PrivateParameters}",
              "fullTitle": "ED-VDF Setup should be successfully return {PublicParameters[N, TIME[\"10s\"], PrivateParameters}",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nreturn expect(typeof PublicParameters.N).to.be.eql('bigint')\n    && expect(PublicParameters.Time).to.be.eql(constants.TIME[\"10s\"])\n    && expect(typeof Totient).to.be.eql('bigint');",
              "err": {},
              "uuid": "6a272392-61d3-4215-890e-74c6176cfd4c",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GenPrivateParameter should be successfully return {y, pi}",
              "fullTitle": "ED-VDF GenPrivateParameter should be successfully return {y, pi}",
              "timedOut": false,
              "duration": 5923,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {PrivateParameter, pi} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, X);\nreturn expect(BigInteger.isInstance(PrivateParameter)).to.be.true\n    && expect(BigInteger.isInstance(pi)).to.be.true;",
              "err": {},
              "uuid": "ea12062d-9419-4c38-94e8-fff7d6a88329",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ShortCircuitEval should be successfully return y",
              "fullTitle": "ED-VDF ShortCircuitEval should be successfully return y",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst y = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true;",
              "err": {},
              "uuid": "e23a207c-4cfc-4e57-9402-685f7e54c621",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "EarlyDecryptionSetup should be successfully return SharedPrivateParameters",
              "fullTitle": "ED-VDF EarlyDecryptionSetup should be successfully return SharedPrivateParameters",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst PrivateParameter = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nconst SharedPrivateParameters = EDVDF.EarlyDecryptionSetup(PrivateParameter, { shares: 5, threshold: 3 });\nreturn expect(Array.isArray(SharedPrivateParameters)).to.be.true;",
              "err": {},
              "uuid": "74a69415-5522-457e-80bb-0e675f757790",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "EarlyDecryption ReconstructedPrivateParameter should be equal PrivateParameter",
              "fullTitle": "ED-VDF EarlyDecryption ReconstructedPrivateParameter should be equal PrivateParameter",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst PrivateParameter = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nconst SharedPrivateParameters = EDVDF.EarlyDecryptionSetup(PrivateParameter, { shares: 5, threshold: 3 });\nconst ReconstructedPrivateParameter = EDVDF.EarlyDecryption(SharedPrivateParameters.slice(1, 4));\nreturn expect(ReconstructedPrivateParameter).to.be.eql(PrivateParameter.value);",
              "err": {},
              "uuid": "c742ca8b-6b8c-4381-92fa-e560d871e10d",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Eval should be successfully return {y, pi}",
              "fullTitle": "ED-VDF Eval should be successfully return {y, pi}",
              "timedOut": false,
              "duration": 2106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.Eval(PublicParameters, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true\n    && expect(BigInteger.isInstance(pi)).to.be.true;",
              "err": {},
              "uuid": "4f313781-49d5-4834-89ee-694924e06d36",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "_Eval should be successfully return y",
              "fullTitle": "ED-VDF _Eval should be successfully return y",
              "timedOut": false,
              "duration": 530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst y = await EDVDF._Eval(PublicParameters, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true;",
              "err": {},
              "uuid": "582946bd-bf32-489d-a239-7e06c9cab82e",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify should be successfully return true",
              "fullTitle": "ED-VDF Verify should be successfully return true",
              "timedOut": false,
              "duration": 2084,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.Eval(PublicParameters, X);\nconst t = await EDVDF.Verify(PublicParameters, X, y, pi);\nreturn expect(t).to.be.true;",
              "err": {},
              "uuid": "d1c9abc6-c951-4284-be1f-09f9d620ffee",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HPrime should be successfully return Challenge",
              "fullTitle": "ED-VDF HPrime should be successfully return Challenge",
              "timedOut": false,
              "duration": 5579,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters: {N, Time}, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.GenPrivateParameter({N, Time}, Totient, X);\nconst Challenge = await EDVDF.HPrime(N, Time, X, y);\nreturn expect(typeof Challenge === \"bigint\").to.be.true;",
              "err": {},
              "uuid": "e017ac4d-faad-404e-be61-4eb98d63f5a6",
              "parentUUID": "e822ecad-c2c6-48b9-981e-73a3ba79f30f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6a272392-61d3-4215-890e-74c6176cfd4c",
            "ea12062d-9419-4c38-94e8-fff7d6a88329",
            "e23a207c-4cfc-4e57-9402-685f7e54c621",
            "74a69415-5522-457e-80bb-0e675f757790",
            "c742ca8b-6b8c-4381-92fa-e560d871e10d",
            "4f313781-49d5-4834-89ee-694924e06d36",
            "582946bd-bf32-489d-a239-7e06c9cab82e",
            "d1c9abc6-c951-4284-be1f-09f9d620ffee",
            "e017ac4d-faad-404e-be61-4eb98d63f5a6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16808,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "85e68a4b-deff-418e-8dd7-e82cd0049468",
          "title": "RSA",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\rsa.test.js",
          "file": "\\test\\rsa.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Setup should be successfully return {SecretKeys, PublicKeys} with bit length 256",
              "fullTitle": "RSA Setup should be successfully return {SecretKeys, PublicKeys} with bit length 256",
              "timedOut": false,
              "duration": 162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {SecretKeys, PublicKeys} = await RSA.Setup(256);\nreturn expect(typeof SecretKeys.Totient).to.be.eql('bigint')\n    && expect(typeof SecretKeys.d).to.be.eql('bigint')\n    && expect(typeof PublicKeys.N).to.be.eql('bigint')\n    && expect(typeof PublicKeys.e).to.be.eql('bigint')\n    && expect(PublicKeys.e).to.be.equal(65537n);",
              "err": {},
              "uuid": "d15b94c9-f351-429e-83b3-3a0f876d8598",
              "parentUUID": "85e68a4b-deff-418e-8dd7-e82cd0049468",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d15b94c9-f351-429e-83b3-3a0f876d8598"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 162,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "2ed279e4-e2cd-4641-9123-2844de269890",
          "title": "SecretShare",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\secretShare.test.js",
          "file": "\\test\\secretShare.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "construct for 5 shares should be successfully return {Array(5){Buffer(18)}}",
              "fullTitle": "SecretShare construct for 5 shares should be successfully return {Array(5){Buffer(18)}}",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nreturn expect(shares).to.have.lengthOf(5);",
              "err": {},
              "uuid": "4c62f227-a13f-4acb-8973-2f5608eb11fd",
              "parentUUID": "2ed279e4-e2cd-4641-9123-2844de269890",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "834099bb-b26a-4b10-960b-c10c29557fc7",
              "title": "reconstruct",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\secretShare.test.js",
              "file": "\\test\\secretShare.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with 3 shares for threshold 3 should be equal {secret_key}",
                  "fullTitle": "SecretShare reconstruct with 3 shares for threshold 3 should be equal {secret_key}",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_key = SecretShare.reconstruct(shares.slice(0, 3));\nreturn expect(reconstruct_secret_key).to.be.eql(secret_key);",
                  "err": {},
                  "uuid": "8ab37725-6074-4a60-87ab-82060468adf5",
                  "parentUUID": "834099bb-b26a-4b10-960b-c10c29557fc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 4 shares for threshold 3 should be equal {secret_key}",
                  "fullTitle": "SecretShare reconstruct with 4 shares for threshold 3 should be equal {secret_key}",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_key = SecretShare.reconstruct(shares.slice(0, 4));\nreturn expect(reconstruct_secret_key).to.be.eql(secret_key);",
                  "err": {},
                  "uuid": "7adc40b5-03c6-4b4e-845c-5a84a20ad8b7",
                  "parentUUID": "834099bb-b26a-4b10-960b-c10c29557fc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "_reconstructWithEveryEncoding with 3 shares for threshold 3 should be return {secret_key} for each SecretShare._encodings",
                  "fullTitle": "SecretShare reconstruct _reconstructWithEveryEncoding with 3 shares for threshold 3 should be return {secret_key} for each SecretShare._encodings",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_keys = SecretShare._reconstructWithEveryEncoding(shares.slice(0, 4));\nreturn expect(Object.keys(reconstruct_secret_keys)).to.have.lengthOf(10)",
                  "err": {},
                  "uuid": "308137f7-d6ec-4940-b3a5-dc27da86006d",
                  "parentUUID": "834099bb-b26a-4b10-960b-c10c29557fc7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 2 shares for threshold 3 should throw {`reconstruct:shares:2: can not reconstructed`}",
                  "fullTitle": "SecretShare reconstruct with 2 shares for threshold 3 should throw {`reconstruct:shares:2: can not reconstructed`}",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nreturn expect(() => SecretShare.reconstruct(shares.slice(0, 2))).to.be.throw(`reconstruct:shares:2: can not reconstructed`)",
                  "err": {},
                  "uuid": "82af1138-3448-45dd-a74b-d9caf58847fe",
                  "parentUUID": "834099bb-b26a-4b10-960b-c10c29557fc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ab37725-6074-4a60-87ab-82060468adf5",
                "7adc40b5-03c6-4b4e-845c-5a84a20ad8b7",
                "308137f7-d6ec-4940-b3a5-dc27da86006d",
                "82af1138-3448-45dd-a74b-d9caf58847fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "4c62f227-a13f-4acb-8973-2f5608eb11fd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}