{
  "stats": {
    "suites": 7,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-05T09:37:07.952Z",
    "end": "2021-12-05T09:38:01.962Z",
    "duration": 54010,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "75ca05da-6fdb-4f3a-992b-95b061827e12",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fca1fa8f-46cb-4a7c-9a03-790dda2d82c8",
          "title": "ED_VDF contract",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
          "file": "\\test\\edvdf.contract.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ED_VDF contract \"before all\" hook",
              "timedOut": false,
              "duration": 1606,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "EDVdfContractABI = await ethers.getContractFactory(CONTRACT_NAME);\nconst accounts = (await ethers.getSigners()).slice(0, 5);\nfor(let account of accounts){\n    SECRET_SHARER_PARTICIPANTS.push(await account.getAddress());\n}",
              "err": {},
              "uuid": "549dcbe1-28ca-4b26-8e22-7b9f2bf8c417",
              "parentUUID": "fca1fa8f-46cb-4a7c-9a03-790dda2d82c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bc329a68-5e55-41fa-bea2-e5d4bd208235",
              "title": "deployment",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful",
                  "fullTitle": "ED_VDF contract deployment should be successful",
                  "timedOut": false,
                  "duration": 654,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EDVdfContract = await EDVdfContractABI.deploy();\nconst actualStatus = await EDVdfContract.STATUS();\nreturn expect(actualStatus).to.be.eql('INIT');",
                  "err": {},
                  "uuid": "56451288-b737-4549-98ed-e82077caa6cd",
                  "parentUUID": "bc329a68-5e55-41fa-bea2-e5d4bd208235",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56451288-b737-4549-98ed-e82077caa6cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 654,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c0afb4a3-39e4-47bb-b4f3-302e289fcf4b",
              "title": "Setup",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Setup should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 4563,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst {PublicParameters, Totient, PrivateParameter} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_Status).to.be.eql('SETUP');",
                  "err": {},
                  "uuid": "5a864c26-0163-424d-8eab-e18f3441ddf0",
                  "parentUUID": "c0afb4a3-39e4-47bb-b4f3-302e289fcf4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a864c26-0163-424d-8eab-e18f3441ddf0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4563,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "d9a77275-7e93-4d3f-9ccd-d9b9e72a5542",
              "title": "EarlyDecryptionSetup",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract EarlyDecryptionSetup should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 10407,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.setEncryptedMessage(encrypted);\nawait EdVdfContract.setEncryptedMessageIV(iv.toString('hex'));\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistribution = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS);\nawait event_EARLY_DECRYPTION_SETUP();\nconst actual_SECRET_SHARER_PARTICIPANTS = await EdVdfContract.get_SECRET_SHARER_PARTICIPANTS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_SECRET_SHARER_PARTICIPANTS).to.be.eql(SECRET_SHARER_PARTICIPANTS);",
                  "err": {},
                  "uuid": "99b826a1-813a-4ac7-8c49-83cdf3a6bb3b",
                  "parentUUID": "d9a77275-7e93-4d3f-9ccd-d9b9e72a5542",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99b826a1-813a-4ac7-8c49-83cdf3a6bb3b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10407,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "4417e559-6bac-45e6-aad4-6f85bdf92b5b",
              "title": "Eval",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Eval should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 18530,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.setEncryptedMessage(encrypted);\nawait EdVdfContract.setEncryptedMessageIV(iv.toString('hex'));\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistributionEvents = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nawait EdVdfContract.setStateToEval();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('EVAL');",
                  "err": {},
                  "uuid": "b46f608c-1386-43d2-be1e-3ec9a01674e5",
                  "parentUUID": "4417e559-6bac-45e6-aad4-6f85bdf92b5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b46f608c-1386-43d2-be1e-3ec9a01674e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 18530,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "3cec26f7-31b6-42de-98d9-6d905f067122",
              "title": "EarlyDecryption",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract EarlyDecryption should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 9135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.setEncryptedMessage(encrypted);\nawait EdVdfContract.setEncryptedMessageIV(iv.toString('hex'));\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistributionEvents = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nawait EdVdfContract.setStateToEval();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('EVAL');",
                  "err": {},
                  "uuid": "62faccfb-b640-47ba-88c3-491392543f72",
                  "parentUUID": "3cec26f7-31b6-42de-98d9-6d905f067122",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62faccfb-b640-47ba-88c3-491392543f72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9135,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "dece9107-9136-4ce8-84ab-213da1513124",
              "title": "Verify",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Verify should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 9103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst event_VERIFY = WaitEvent(EDVdfContractABI.signer.provider, \"VERIFY(address,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.setEncryptedMessage(encrypted);\nawait EdVdfContract.setEncryptedMessageIV(iv.toString('hex'));\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistribution = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nawait EdVdfContract.setStateToEval();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nawait EdVdfContract.Verify(evalPrivateParameter.value, pi.value);\nawait event_VERIFY();\nawait EdVdfContract.setStateToVerify();\nawait EDVDF.Verify(PublicParameters, actual_x, evalPrivateParameter, pi);\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_SECRET_SHARER_PARTICIPANTS = await EdVdfContract.get_SECRET_SHARER_PARTICIPANTS();\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_SECRET_SHARER_PARTICIPANTS).to.be.eql(SECRET_SHARER_PARTICIPANTS)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('VERIFY');",
                  "err": {},
                  "uuid": "98bebbe6-9bb8-4ae7-a732-cb9d49c78b3c",
                  "parentUUID": "dece9107-9136-4ce8-84ab-213da1513124",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98bebbe6-9bb8-4ae7-a732-cb9d49c78b3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9103,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}