{
  "stats": {
    "suites": 10,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-18T08:05:41.057Z",
    "end": "2021-11-18T08:07:03.210Z",
    "duration": 82153,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ed172461-40b1-4c51-bcb2-56b64010920d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3452878f-92c8-4588-ae83-45a70d666eef",
          "title": "ED_VDF contract",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
          "file": "\\test\\edvdf.contract.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ED_VDF contract \"before all\" hook",
              "timedOut": false,
              "duration": 1348,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "EDVdfContractABI = await ethers.getContractFactory(CONTRACT_NAME);\nconst accounts = (await ethers.getSigners()).slice(0, 5);\nfor(let account of accounts){\n    SECRET_SHARER_PARTICIPANTS.push(await account.getAddress());\n}",
              "err": {},
              "uuid": "18d698ca-c83d-4424-9415-2bf04330465f",
              "parentUUID": "3452878f-92c8-4588-ae83-45a70d666eef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "250bd231-ffdd-411d-b875-e81a3296f495",
              "title": "deployment",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful",
                  "fullTitle": "ED_VDF contract deployment should be successful",
                  "timedOut": false,
                  "duration": 576,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EDVdfContract = await EDVdfContractABI.deploy();\nconst actualStatus = await EDVdfContract.STATUS();\nreturn expect(actualStatus).to.be.eql('INIT');",
                  "err": {},
                  "uuid": "97e7efd1-342c-4ab1-8c03-c75a1baace1f",
                  "parentUUID": "250bd231-ffdd-411d-b875-e81a3296f495",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97e7efd1-342c-4ab1-8c03-c75a1baace1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 576,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "3d2a18d8-77c0-4da5-a965-9072f6ce4b0a",
              "title": "Setup",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Setup should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 4470,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst {PublicParameters, Totient, PrivateParameter} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_Status).to.be.eql('SETUP');",
                  "err": {},
                  "uuid": "e82bc214-b1c3-4e58-9ba7-e6d3a050cef9",
                  "parentUUID": "3d2a18d8-77c0-4da5-a965-9072f6ce4b0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e82bc214-b1c3-4e58-9ba7-e6d3a050cef9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4470,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "8d75dfe1-3373-465c-9674-0fe4d105791d",
              "title": "EarlyDecryptionSetup",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract EarlyDecryptionSetup should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 9590,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistribution = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS, encrypted);\nawait event_EARLY_DECRYPTION_SETUP();\nconst actual_SECRET_SHARER_PARTICIPANTS = await EdVdfContract.get_SECRET_SHARER_PARTICIPANTS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_SECRET_SHARER_PARTICIPANTS).to.be.eql(SECRET_SHARER_PARTICIPANTS);",
                  "err": {},
                  "uuid": "37635755-5240-4f61-bdf8-19cc26edfb23",
                  "parentUUID": "8d75dfe1-3373-465c-9674-0fe4d105791d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37635755-5240-4f61-bdf8-19cc26edfb23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9590,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "4970299c-4007-4b25-8f85-8eae392ad43d",
              "title": "Eval",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Eval should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 12234,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistributionEvents = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nconst key = AES.getAsKey(PrivateParameter.value);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS, encrypted);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('EVAL');",
                  "err": {},
                  "uuid": "e3a4611d-ed5d-496e-871a-ea4d273337ad",
                  "parentUUID": "4970299c-4007-4b25-8f85-8eae392ad43d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3a4611d-ed5d-496e-871a-ea4d273337ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12234,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "5fe6ec8f-b722-4c65-93a7-72ad14f872e6",
              "title": "Verify",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Verify should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 24630,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst event_VERIFY = WaitEvent(EDVdfContractABI.signer.provider, \"VERIFY(address,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistribution = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nconst key = AES.getAsKey(PrivateParameter.value);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS, encrypted);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nawait EDVDF.Verify(PublicParameters, actual_x, evalPrivateParameter, pi);\nlog(new Date().toISOString(), `Verify_Wes18`);\nconst actual_Verify_TRANSACTION = (await EdVdfContract.Verify(evalPrivateParameter.value, pi.value));\nawait event_VERIFY();\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_SECRET_SHARER_PARTICIPANTS = await EdVdfContract.get_SECRET_SHARER_PARTICIPANTS();\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_SECRET_SHARER_PARTICIPANTS).to.be.eql(SECRET_SHARER_PARTICIPANTS)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('VERIFY');",
                  "err": {},
                  "uuid": "c01f6600-4480-4603-8edf-5c48ba06b7a2",
                  "parentUUID": "5fe6ec8f-b722-4c65-93a7-72ad14f872e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c01f6600-4480-4603-8edf-5c48ba06b7a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24630,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
          "title": "ED-VDF",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.test.js",
          "file": "\\test\\edvdf.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Setup should be successfully return {PublicParameters[N, TIME[\"10s\"], PrivateParameters}",
              "fullTitle": "ED-VDF Setup should be successfully return {PublicParameters[N, TIME[\"10s\"], PrivateParameters}",
              "timedOut": false,
              "duration": 139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nreturn expect(typeof PublicParameters.N).to.be.eql('bigint')\n    && expect(PublicParameters.Time).to.be.eql(constants.TIME[\"10s\"])\n    && expect(typeof Totient).to.be.eql('bigint');",
              "err": {},
              "uuid": "e057073a-9d4a-4d32-a0c2-422f2ed6d51b",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GenPrivateParameter should be successfully return {y, pi}",
              "fullTitle": "ED-VDF GenPrivateParameter should be successfully return {y, pi}",
              "timedOut": false,
              "duration": 258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {PrivateParameter, pi} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, X);\nreturn expect(BigInteger.isInstance(PrivateParameter)).to.be.true\n    && expect(BigInteger.isInstance(pi)).to.be.true;",
              "err": {},
              "uuid": "e62cf8b9-d940-430c-94cb-98e9df1684b9",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ShortCircuitEval should be successfully return y",
              "fullTitle": "ED-VDF ShortCircuitEval should be successfully return y",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst y = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true;",
              "err": {},
              "uuid": "1e51ad21-6b47-45a6-86d7-c34aa20cb2a4",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "EarlyDecryptionSetup should be successfully return SharedPrivateParameters",
              "fullTitle": "ED-VDF EarlyDecryptionSetup should be successfully return SharedPrivateParameters",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst PrivateParameter = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nconst SharedPrivateParameters = EDVDF.EarlyDecryptionSetup(PrivateParameter, { shares: 5, threshold: 3 });\nreturn expect(Array.isArray(SharedPrivateParameters)).to.be.true;",
              "err": {},
              "uuid": "2127cb87-6de7-4684-9276-b663fc1664ef",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "EarlyDecryption ReconstructedPrivateParameter should be equal PrivateParameter",
              "fullTitle": "ED-VDF EarlyDecryption ReconstructedPrivateParameter should be equal PrivateParameter",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst PrivateParameter = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nconst SharedPrivateParameters = EDVDF.EarlyDecryptionSetup(PrivateParameter, { shares: 5, threshold: 3 });\nconst ReconstructedPrivateParameter = EDVDF.EarlyDecryption(SharedPrivateParameters.slice(1, 4));\nreturn expect(ReconstructedPrivateParameter).to.be.eql(PrivateParameter.value);",
              "err": {},
              "uuid": "0824d4d0-0b49-4b2f-ab20-ff343e441d38",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Eval should be successfully return {y, pi}",
              "fullTitle": "ED-VDF Eval should be successfully return {y, pi}",
              "timedOut": false,
              "duration": 3453,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.Eval(PublicParameters, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true\n    && expect(BigInteger.isInstance(pi)).to.be.true;",
              "err": {},
              "uuid": "7b8a334c-748b-4e1e-9005-6bf5f13fee22",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "_Eval should be successfully return y",
              "fullTitle": "ED-VDF _Eval should be successfully return y",
              "timedOut": false,
              "duration": 561,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst y = await EDVDF._Eval(PublicParameters, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true;",
              "err": {},
              "uuid": "7724086d-4e19-40e0-a537-0ac547dcdef9",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify should be successfully return true",
              "fullTitle": "ED-VDF Verify should be successfully return true",
              "timedOut": false,
              "duration": 16054,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.Eval(PublicParameters, X);\nconst t = await EDVDF.Verify(PublicParameters, X, y, pi);\nreturn expect(t).to.be.true;",
              "err": {},
              "uuid": "cf479de1-3899-44ad-9a25-b7e3ea85a235",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HPrime should be successfully return Challenge",
              "fullTitle": "ED-VDF HPrime should be successfully return Challenge",
              "timedOut": false,
              "duration": 8145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters: {N, Time}, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.GenPrivateParameter({N, Time}, Totient, X);\nconst Challenge = await EDVDF.HPrime(N, Time, X, y);\nreturn expect(typeof Challenge === \"bigint\").to.be.true;",
              "err": {},
              "uuid": "521017c6-3c4b-4410-acf3-2eb9f4c3fbd5",
              "parentUUID": "3058151d-f301-4548-b1e4-b2b6d0256b3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e057073a-9d4a-4d32-a0c2-422f2ed6d51b",
            "e62cf8b9-d940-430c-94cb-98e9df1684b9",
            "1e51ad21-6b47-45a6-86d7-c34aa20cb2a4",
            "2127cb87-6de7-4684-9276-b663fc1664ef",
            "0824d4d0-0b49-4b2f-ab20-ff343e441d38",
            "7b8a334c-748b-4e1e-9005-6bf5f13fee22",
            "7724086d-4e19-40e0-a537-0ac547dcdef9",
            "cf479de1-3899-44ad-9a25-b7e3ea85a235",
            "521017c6-3c4b-4410-acf3-2eb9f4c3fbd5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29054,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "139a8898-d26f-4cae-90c9-c6cc7591a631",
          "title": "RSA",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\rsa.test.js",
          "file": "\\test\\rsa.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Setup should be successfully return {SecretKeys, PublicKeys} with bit length 256",
              "fullTitle": "RSA Setup should be successfully return {SecretKeys, PublicKeys} with bit length 256",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {SecretKeys, PublicKeys} = await RSA.Setup(256);\nreturn expect(typeof SecretKeys.Totient).to.be.eql('bigint')\n    && expect(typeof SecretKeys.d).to.be.eql('bigint')\n    && expect(typeof PublicKeys.N).to.be.eql('bigint')\n    && expect(typeof PublicKeys.e).to.be.eql('bigint')\n    && expect(PublicKeys.e).to.be.equal(65537n);",
              "err": {},
              "uuid": "602ce6b0-46c1-4f80-b378-15e92970e5fc",
              "parentUUID": "139a8898-d26f-4cae-90c9-c6cc7591a631",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "602ce6b0-46c1-4f80-b378-15e92970e5fc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 173,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d389f30e-4eb9-41ec-b5ae-1cd8c91e41fc",
          "title": "SecretShare",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\secretShare.test.js",
          "file": "\\test\\secretShare.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "construct for 5 shares should be successfully return {Array(5){Buffer(18)}}",
              "fullTitle": "SecretShare construct for 5 shares should be successfully return {Array(5){Buffer(18)}}",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nreturn expect(shares).to.have.lengthOf(5);",
              "err": {},
              "uuid": "2ce2af05-5300-4e23-8af7-2b912c3aec37",
              "parentUUID": "d389f30e-4eb9-41ec-b5ae-1cd8c91e41fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2d8abfad-f917-473f-ac82-84103f993d1f",
              "title": "reconstruct",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\secretShare.test.js",
              "file": "\\test\\secretShare.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with 3 shares for threshold 3 should be equal {secret_key}",
                  "fullTitle": "SecretShare reconstruct with 3 shares for threshold 3 should be equal {secret_key}",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_key = SecretShare.reconstruct(shares.slice(0, 3));\nreturn expect(reconstruct_secret_key).to.be.eql(secret_key);",
                  "err": {},
                  "uuid": "022d5bc0-3617-4f07-8e06-203943f13710",
                  "parentUUID": "2d8abfad-f917-473f-ac82-84103f993d1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 4 shares for threshold 3 should be equal {secret_key}",
                  "fullTitle": "SecretShare reconstruct with 4 shares for threshold 3 should be equal {secret_key}",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_key = SecretShare.reconstruct(shares.slice(0, 4));\nreturn expect(reconstruct_secret_key).to.be.eql(secret_key);",
                  "err": {},
                  "uuid": "420177b4-5913-407f-88f8-5ac0ed4d5fc7",
                  "parentUUID": "2d8abfad-f917-473f-ac82-84103f993d1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "_reconstructWithEveryEncoding with 3 shares for threshold 3 should be return {secret_key} for each SecretShare._encodings",
                  "fullTitle": "SecretShare reconstruct _reconstructWithEveryEncoding with 3 shares for threshold 3 should be return {secret_key} for each SecretShare._encodings",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_keys = SecretShare._reconstructWithEveryEncoding(shares.slice(0, 4));\nreturn expect(Object.keys(reconstruct_secret_keys)).to.have.lengthOf(10)",
                  "err": {},
                  "uuid": "6f792cc9-9ab6-405c-be2d-01f01a71885f",
                  "parentUUID": "2d8abfad-f917-473f-ac82-84103f993d1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 2 shares for threshold 3 should throw {`reconstruct:shares:2: can not reconstructed`}",
                  "fullTitle": "SecretShare reconstruct with 2 shares for threshold 3 should throw {`reconstruct:shares:2: can not reconstructed`}",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nreturn expect(() => SecretShare.reconstruct(shares.slice(0, 2))).to.be.throw(`reconstruct:shares:2: can not reconstructed`)",
                  "err": {},
                  "uuid": "91d94544-a266-4c23-97fa-c1f64a214b40",
                  "parentUUID": "2d8abfad-f917-473f-ac82-84103f993d1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "022d5bc0-3617-4f07-8e06-203943f13710",
                "420177b4-5913-407f-88f8-5ac0ed4d5fc7",
                "6f792cc9-9ab6-405c-be2d-01f01a71885f",
                "91d94544-a266-4c23-97fa-c1f64a214b40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "2ce2af05-5300-4e23-8af7-2b912c3aec37"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}