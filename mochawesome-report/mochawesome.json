{
  "stats": {
    "suites": 10,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-17T19:20:17.464Z",
    "end": "2021-11-17T19:21:40.833Z",
    "duration": 83369,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b0ba8f39-64d5-4233-b300-ad05672d6e46",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b134f3be-931c-4992-b6dd-f891360e966e",
          "title": "ED_VDF contract",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
          "file": "\\test\\edvdf.contract.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "ED_VDF contract \"before all\" hook",
              "timedOut": false,
              "duration": 1636,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "EDVdfContractABI = await ethers.getContractFactory(CONTRACT_NAME);\nconst accounts = (await ethers.getSigners()).slice(0, 5);\nfor(let account of accounts){\n    SECRET_SHARER_PARTICIPANTS.push(await account.getAddress());\n}",
              "err": {},
              "uuid": "c1989ab7-4db0-4086-9cf0-a4052bd9708e",
              "parentUUID": "b134f3be-931c-4992-b6dd-f891360e966e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "99654704-5cfe-4a7e-ae05-8739194a79f4",
              "title": "deployment",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful",
                  "fullTitle": "ED_VDF contract deployment should be successful",
                  "timedOut": false,
                  "duration": 656,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EDVdfContract = await EDVdfContractABI.deploy();\nconst actualStatus = await EDVdfContract.STATUS();\nreturn expect(actualStatus).to.be.eql('INIT');",
                  "err": {},
                  "uuid": "216a6135-29bf-4189-974d-45788ba8c596",
                  "parentUUID": "99654704-5cfe-4a7e-ae05-8739194a79f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "216a6135-29bf-4189-974d-45788ba8c596"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 656,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "c6f87ac2-b625-4213-ab83-aae9f334906b",
              "title": "Setup",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Setup should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 4700,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst {PublicParameters, Totient, PrivateParameter} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_Status).to.be.eql('SETUP');",
                  "err": {},
                  "uuid": "2ae0818c-9611-4863-b227-7edee987b0e2",
                  "parentUUID": "c6f87ac2-b625-4213-ab83-aae9f334906b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ae0818c-9611-4863-b227-7edee987b0e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4700,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "10d8092e-7c10-475d-aa9c-c3094a9b556a",
              "title": "EarlyDecryptionSetup",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract EarlyDecryptionSetup should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 10339,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistribution = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nconst key = AES.getAsKey(PrivateParameter);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS, encrypted);\nawait event_EARLY_DECRYPTION_SETUP();\nconst actual_SECRET_SHARER_PARTICIPANTS = await EdVdfContract.get_SECRET_SHARER_PARTICIPANTS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_SECRET_SHARER_PARTICIPANTS).to.be.eql(SECRET_SHARER_PARTICIPANTS);",
                  "err": {},
                  "uuid": "acce3cb3-e3ae-4091-8c9a-6dd7e0d24842",
                  "parentUUID": "10d8092e-7c10-475d-aa9c-c3094a9b556a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "acce3cb3-e3ae-4091-8c9a-6dd7e0d24842"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10339,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "9214e6c7-effa-4206-9b5d-05607d09d30b",
              "title": "Eval",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Eval should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 21464,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistributionEvents = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nconst key = AES.getAsKey(PrivateParameter.value);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS, encrypted);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('EVAL');",
                  "err": {},
                  "uuid": "a54da2cb-2e58-430d-8a9b-117c0c83e194",
                  "parentUUID": "9214e6c7-effa-4206-9b5d-05607d09d30b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a54da2cb-2e58-430d-8a9b-117c0c83e194"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21464,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            },
            {
              "uuid": "0853da25-2151-4618-9f29-f0b696736944",
              "title": "Verify",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.contract.test.js",
              "file": "\\test\\edvdf.contract.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be successful with random 256 bit prime number",
                  "fullTitle": "ED_VDF contract Verify should be successful with random 256 bit prime number",
                  "timedOut": false,
                  "duration": 20649,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const EdVdfContract = await EDVdfContractABI.deploy();\nconst event_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"SETUP(uint256)\");\nconst event_EARLY_DECRYPTION_SETUP = WaitEvent(EDVdfContractABI.signer.provider, \"EARLY_DECRYPTION_SETUP(string[])\");\nconst event_EVAL = WaitEvent(EDVdfContractABI.signer.provider, \"EVAL(uint256,uint256,uint256)\");\nconst event_VERIFY = WaitEvent(EDVdfContractABI.signer.provider, \"VERIFY(address,uint256,uint256)\");\nconst {PublicParameters, Totient} = await EDVDF.Setup(256, TIME[\"10s\"]);\nconst recipient = (await ethers.getSigners())[8];\nawait EdVdfContract.Setup(PublicParameters.N, PublicParameters.Time, recipient);\nconst expected_x = BigInt((await event_SETUP()).data);\nconst actual_x = BigInt(await EdVdfContract.x());\nconst {PrivateParameter} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, actual_x);\nconst shares = EDVDF.EarlyDecryptionSetup(Buffer.from(PrivateParameter.toString()), { shares: 5, threshold: 3 });\nconst shareDistribution = await sendSecretSharesToParticipants(EDVdfContractABI.signer, SECRET_SHARER_PARTICIPANTS, shares);\nconst key = AES.getAsKey(PrivateParameter.value);\nconst {iv, encrypted} = AES.encrypt(key, message);\nawait EdVdfContract.EarlyDecryptionSetup(SECRET_SHARER_PARTICIPANTS, encrypted);\n// await event_EARLY_DECRYPTION_SETUP();\nawait event_EVAL();\nconst {y: evalPrivateParameter, pi} = await EDVDF.Eval(PublicParameters, actual_x);\nawait EDVDF.Verify(PublicParameters, actual_x, evalPrivateParameter, pi);\nlog(new Date().toISOString(), `Verify_Wes18`);\nconst actual_Verify_TRANSACTION = (await EdVdfContract.Verify(evalPrivateParameter.value, pi.value));\nawait event_VERIFY();\nconst encryptedMessage = await EdVdfContract.encryptedMessage();\nconst evalKey = AES.getAsKey(evalPrivateParameter.value);\nconst decryptedMessage = AES.decrypt({iv, key: evalKey}, encryptedMessage);\nconst actual_SECRET_SHARER_PARTICIPANTS = await EdVdfContract.get_SECRET_SHARER_PARTICIPANTS();\nconst actual_Status = await EdVdfContract.STATUS();\nreturn expect(actual_x).to.be.eql(expected_x)\n    && expect(actual_SECRET_SHARER_PARTICIPANTS).to.be.eql(SECRET_SHARER_PARTICIPANTS)\n    && expect(decryptedMessage).to.be.eql(message)\n    && expect(actual_Status).to.be.eql('VERIFY');",
                  "err": {},
                  "uuid": "215f7d62-355d-4956-9ce0-287086e68b68",
                  "parentUUID": "0853da25-2151-4618-9f29-f0b696736944",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "215f7d62-355d-4956-9ce0-287086e68b68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20649,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
          "title": "ED-VDF",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\edvdf.test.js",
          "file": "\\test\\edvdf.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Setup should be successfully return {PublicParameters[N, Time_10s], PrivateParameters}",
              "fullTitle": "ED-VDF Setup should be successfully return {PublicParameters[N, Time_10s], PrivateParameters}",
              "timedOut": false,
              "duration": 146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nreturn expect(typeof PublicParameters.N).to.be.eql('bigint')\n    && expect(PublicParameters.Time).to.be.eql(constants.TIME[\"10s\"])\n    && expect(typeof Totient).to.be.eql('bigint');",
              "err": {},
              "uuid": "8fe20721-ccc4-4dce-b2cd-d73f9c5efce3",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GenPrivateParameter should be successfully return {y, pi}",
              "fullTitle": "ED-VDF GenPrivateParameter should be successfully return {y, pi}",
              "timedOut": false,
              "duration": 1012,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {PrivateParameter, pi} = await EDVDF.GenPrivateParameter(PublicParameters, Totient, X);\nreturn expect(BigInteger.isInstance(PrivateParameter)).to.be.true\n    && expect(BigInteger.isInstance(pi)).to.be.true;",
              "err": {},
              "uuid": "a80b19aa-2140-45bc-b4ce-e9d04a466f93",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ShortCircuitEval should be successfully return y",
              "fullTitle": "ED-VDF ShortCircuitEval should be successfully return y",
              "timedOut": false,
              "duration": 142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst y = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true;",
              "err": {},
              "uuid": "1097245d-f398-40d0-8fee-88f610a91eed",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "EarlyDecryptionSetup should be successfully return SharedPrivateParameters",
              "fullTitle": "ED-VDF EarlyDecryptionSetup should be successfully return SharedPrivateParameters",
              "timedOut": false,
              "duration": 143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst PrivateParameter = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nconst SharedPrivateParameters = EDVDF.EarlyDecryptionSetup(PrivateParameter, { shares: 5, threshold: 3 });\nreturn expect(Array.isArray(SharedPrivateParameters)).to.be.true;",
              "err": {},
              "uuid": "19f708e6-3710-4f73-8317-2683b91318cd",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "EarlyDecryption ReconstructedPrivateParameter should be equal PrivateParameter",
              "fullTitle": "ED-VDF EarlyDecryption ReconstructedPrivateParameter should be equal PrivateParameter",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst PrivateParameter = await EDVDF.ShortCircuitEval(PublicParameters, Totient, X);\nconst SharedPrivateParameters = EDVDF.EarlyDecryptionSetup(PrivateParameter, { shares: 5, threshold: 3 });\nconst ReconstructedPrivateParameter = EDVDF.EarlyDecryption(SharedPrivateParameters.slice(1, 4));\nreturn expect(ReconstructedPrivateParameter).to.be.eql(PrivateParameter.value);",
              "err": {},
              "uuid": "f379b39c-30c5-4a78-9248-013b0e867582",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Eval should be successfully return {y, pi}",
              "fullTitle": "ED-VDF Eval should be successfully return {y, pi}",
              "timedOut": false,
              "duration": 5101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.Eval(PublicParameters, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true\n    && expect(BigInteger.isInstance(pi)).to.be.true;",
              "err": {},
              "uuid": "b114534e-3902-4aac-8e91-9b1f2aff29c9",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "_Eval should be successfully return y",
              "fullTitle": "ED-VDF _Eval should be successfully return y",
              "timedOut": false,
              "duration": 520,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst y = await EDVDF._Eval(PublicParameters, X);\nreturn expect(BigInteger.isInstance(y)).to.be.true;",
              "err": {},
              "uuid": "19bc6638-c344-462a-8cd8-b0c48bbe0d9b",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify should be successfully return true",
              "fullTitle": "ED-VDF Verify should be successfully return true",
              "timedOut": false,
              "duration": 12732,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.Eval(PublicParameters, X);\nconst t = await EDVDF.Verify(PublicParameters, X, y, pi);\nreturn expect(t).to.be.true;",
              "err": {},
              "uuid": "8d236af0-5413-4ba9-8290-c47ab2b43567",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HPrime should be successfully return Challenge",
              "fullTitle": "ED-VDF HPrime should be successfully return Challenge",
              "timedOut": false,
              "duration": 3752,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {PublicParameters: {N, Time}, Totient} = await EDVDF.Setup(RSA_KEYS_BIT_LENGTH, constants.TIME[\"10s\"]);\nconst {y, pi} = await EDVDF.GenPrivateParameter({N, Time}, Totient, X);\nconst Challenge = await EDVDF.HPrime(N, Time, X, y);\nreturn expect(typeof Challenge === \"bigint\").to.be.true;",
              "err": {},
              "uuid": "dc83d6e1-7a84-4451-8953-306d99e2808a",
              "parentUUID": "a3cac84a-e88e-49af-a6f1-b3fab74596c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fe20721-ccc4-4dce-b2cd-d73f9c5efce3",
            "a80b19aa-2140-45bc-b4ce-e9d04a466f93",
            "1097245d-f398-40d0-8fee-88f610a91eed",
            "19f708e6-3710-4f73-8317-2683b91318cd",
            "f379b39c-30c5-4a78-9248-013b0e867582",
            "b114534e-3902-4aac-8e91-9b1f2aff29c9",
            "19bc6638-c344-462a-8cd8-b0c48bbe0d9b",
            "8d236af0-5413-4ba9-8290-c47ab2b43567",
            "dc83d6e1-7a84-4451-8953-306d99e2808a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23695,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "d1e47f48-c5ec-43a1-9284-33e44b423081",
          "title": "RSA",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\rsa.test.js",
          "file": "\\test\\rsa.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Setup should be successfully return {SecretKeys, PublicKeys} with bit length 256",
              "fullTitle": "RSA Setup should be successfully return {SecretKeys, PublicKeys} with bit length 256",
              "timedOut": false,
              "duration": 166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {SecretKeys, PublicKeys} = await RSA.Setup(256);\nreturn expect(typeof SecretKeys.Totient).to.be.eql('bigint')\n    && expect(typeof SecretKeys.d).to.be.eql('bigint')\n    && expect(typeof PublicKeys.N).to.be.eql('bigint')\n    && expect(typeof PublicKeys.e).to.be.eql('bigint')\n    && expect(PublicKeys.e).to.be.equal(65537n);",
              "err": {},
              "uuid": "4c359f82-cadf-4dfb-8e61-4f96ca4ecfe5",
              "parentUUID": "d1e47f48-c5ec-43a1-9284-33e44b423081",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c359f82-cadf-4dfb-8e61-4f96ca4ecfe5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 166,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        },
        {
          "uuid": "5696eb61-9c7f-418c-b56c-6fdf1f8524ab",
          "title": "SecretShare",
          "fullFile": "C:\\dev\\src\\ed-vdf\\test\\secretShare.test.js",
          "file": "\\test\\secretShare.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "construct for 5 shares should be successfully return {Array(5){Buffer(18)}}",
              "fullTitle": "SecretShare construct for 5 shares should be successfully return {Array(5){Buffer(18)}}",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nreturn expect(shares).to.have.lengthOf(5);",
              "err": {},
              "uuid": "c5beea5e-0abb-486c-991a-bdbcd10470b5",
              "parentUUID": "5696eb61-9c7f-418c-b56c-6fdf1f8524ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "d6877157-2796-43c7-a604-1ed211dc44b3",
              "title": "reconstruct",
              "fullFile": "C:\\dev\\src\\ed-vdf\\test\\secretShare.test.js",
              "file": "\\test\\secretShare.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "with 3 shares for threshold 3 should be equal {secret_key}",
                  "fullTitle": "SecretShare reconstruct with 3 shares for threshold 3 should be equal {secret_key}",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_key = SecretShare.reconstruct(shares.slice(0, 3));\nreturn expect(reconstruct_secret_key).to.be.eql(secret_key);",
                  "err": {},
                  "uuid": "515de46b-700f-47f2-92fa-685ade757df1",
                  "parentUUID": "d6877157-2796-43c7-a604-1ed211dc44b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 4 shares for threshold 3 should be equal {secret_key}",
                  "fullTitle": "SecretShare reconstruct with 4 shares for threshold 3 should be equal {secret_key}",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_key = SecretShare.reconstruct(shares.slice(0, 4));\nreturn expect(reconstruct_secret_key).to.be.eql(secret_key);",
                  "err": {},
                  "uuid": "e844bf12-5c9c-4706-ba75-5fab58707d4f",
                  "parentUUID": "d6877157-2796-43c7-a604-1ed211dc44b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "_reconstructWithEveryEncoding with 3 shares for threshold 3 should be return {secret_key} for each SecretShare._encodings",
                  "fullTitle": "SecretShare reconstruct _reconstructWithEveryEncoding with 3 shares for threshold 3 should be return {secret_key} for each SecretShare._encodings",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nconst reconstruct_secret_keys = SecretShare._reconstructWithEveryEncoding(shares.slice(0, 4));\nreturn expect(Object.keys(reconstruct_secret_keys)).to.have.lengthOf(10)",
                  "err": {},
                  "uuid": "21fa6589-da45-4bd6-8665-3572f6f6a86d",
                  "parentUUID": "d6877157-2796-43c7-a604-1ed211dc44b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "with 2 shares for threshold 3 should throw {`reconstruct:shares:2: can not reconstructed`}",
                  "fullTitle": "SecretShare reconstruct with 2 shares for threshold 3 should throw {`reconstruct:shares:2: can not reconstructed`}",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const secret_key = Math.getRandomBigInt(99n, 256n);\nconst shares = SecretShare.construct(Buffer.from(secret_key.toString()), { shares: 5, threshold: 3 });\nreturn expect(() => SecretShare.reconstruct(shares.slice(0, 2))).to.be.throw(`reconstruct:shares:2: can not reconstructed`)",
                  "err": {},
                  "uuid": "3ed5191d-7a17-494b-b18d-32e8cb6d64e2",
                  "parentUUID": "d6877157-2796-43c7-a604-1ed211dc44b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "515de46b-700f-47f2-92fa-685ade757df1",
                "e844bf12-5c9c-4706-ba75-5fab58707d4f",
                "21fa6589-da45-4bd6-8665-3572f6f6a86d",
                "3ed5191d-7a17-494b-b18d-32e8cb6d64e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 300000
            }
          ],
          "passes": [
            "c5beea5e-0abb-486c-991a-bdbcd10470b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 300000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 300000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}